/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface DscAmbulanceWlApp {
        "ambulanceId": string;
        "apiBase": string;
        "basePath": string;
    }
    interface DscAmbulanceWlEditor {
        "entryId": string;
    }
    interface DscAmbulanceWlList {
        "ambulanceId": string;
        "apiBase": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface DscAmbulanceWlEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDscAmbulanceWlEditorElement;
}
export interface DscAmbulanceWlListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDscAmbulanceWlListElement;
}
declare global {
    interface HTMLDscAmbulanceWlAppElement extends Components.DscAmbulanceWlApp, HTMLStencilElement {
    }
    var HTMLDscAmbulanceWlAppElement: {
        prototype: HTMLDscAmbulanceWlAppElement;
        new (): HTMLDscAmbulanceWlAppElement;
    };
    interface HTMLDscAmbulanceWlEditorElementEventMap {
        "editor-closed": string;
    }
    interface HTMLDscAmbulanceWlEditorElement extends Components.DscAmbulanceWlEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDscAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLDscAmbulanceWlEditorElement, ev: DscAmbulanceWlEditorCustomEvent<HTMLDscAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDscAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLDscAmbulanceWlEditorElement, ev: DscAmbulanceWlEditorCustomEvent<HTMLDscAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDscAmbulanceWlEditorElement: {
        prototype: HTMLDscAmbulanceWlEditorElement;
        new (): HTMLDscAmbulanceWlEditorElement;
    };
    interface HTMLDscAmbulanceWlListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLDscAmbulanceWlListElement extends Components.DscAmbulanceWlList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDscAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLDscAmbulanceWlListElement, ev: DscAmbulanceWlListCustomEvent<HTMLDscAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDscAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLDscAmbulanceWlListElement, ev: DscAmbulanceWlListCustomEvent<HTMLDscAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDscAmbulanceWlListElement: {
        prototype: HTMLDscAmbulanceWlListElement;
        new (): HTMLDscAmbulanceWlListElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "dsc-ambulance-wl-app": HTMLDscAmbulanceWlAppElement;
        "dsc-ambulance-wl-editor": HTMLDscAmbulanceWlEditorElement;
        "dsc-ambulance-wl-list": HTMLDscAmbulanceWlListElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface DscAmbulanceWlApp {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "basePath"?: string;
    }
    interface DscAmbulanceWlEditor {
        "entryId"?: string;
        "onEditor-closed"?: (event: DscAmbulanceWlEditorCustomEvent<string>) => void;
    }
    interface DscAmbulanceWlList {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "onEntry-clicked"?: (event: DscAmbulanceWlListCustomEvent<string>) => void;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "dsc-ambulance-wl-app": DscAmbulanceWlApp;
        "dsc-ambulance-wl-editor": DscAmbulanceWlEditor;
        "dsc-ambulance-wl-list": DscAmbulanceWlList;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dsc-ambulance-wl-app": LocalJSX.DscAmbulanceWlApp & JSXBase.HTMLAttributes<HTMLDscAmbulanceWlAppElement>;
            "dsc-ambulance-wl-editor": LocalJSX.DscAmbulanceWlEditor & JSXBase.HTMLAttributes<HTMLDscAmbulanceWlEditorElement>;
            "dsc-ambulance-wl-list": LocalJSX.DscAmbulanceWlList & JSXBase.HTMLAttributes<HTMLDscAmbulanceWlListElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
